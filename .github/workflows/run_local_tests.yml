# Builds a local testnet and runs a set of E2E tests. The workflow is run either manually from a workflow dispatch or
# on a nightly basis via a schedule task.
#
name: Run local tests
run-name: Run local tests (${{ github.event_name }})
on:
  schedule:
    - cron: '10 2 * * *'
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch of go-obscuro to run against'
        required: true
        default: 'main'
      arguments:
        description: 'Arguments to the pysys run'
        required: true
        default: '-e skip -e robustness -e persistence'

jobs:
  run-tests:
    runs-on: self-hosted
    steps:
      - run: echo "Triggered by ${{ github.event_name }} running on obscuro-test branch ${{ github.ref }} "

      - name: 'Log the go-obscuro branch for workflow dispatch'
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo "Running on go-obscuro branch ${{ github.event.inputs.target_branch }}"

      - name: 'Check out obscuro-test'
        uses: actions/checkout@v3
        with:
          path: ./obscuro-test

      - name: 'Check out faucet code'
        uses: actions/checkout@v3
        with:
          repository: obscuronet/faucet
          path: ./faucet

      - name: 'Check out go-obscuro code on schedule trigger'
        if: ${{ github.event_name == 'schedule' }}
        uses: actions/checkout@v3
        with:
          repository: obscuronet/go-obscuro
          path: ./go-obscuro

      - name: 'Check out go-obscuro code on workflow dispatch'
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v3
        with:
          repository: obscuronet/go-obscuro
          path: ./go-obscuro
          ref: ${{ github.event.inputs.target_branch }}

      - name: 'Docker clean containers and images before the test'
        run: |
          for i in `docker ps -a | awk '{ print $1 } ' | grep -v CONTAINER`; do docker stop $i && docker rm $i; done
          docker system prune -af --volumes
          for i in `docker volume ls --filter dangling=true -q`; do docker volume rm $i; done

      - name: 'Build docker containers'
        run: |
          cd ${{ github.workspace }}/obscuro-test/utils/testnet
          docker compose -f docker-compose.local.yml build --parallel 

      - name: 'Start up testnet'
        run: |
          cd ${{ github.workspace }}/go-obscuro/
          go run ./testnet/launcher/cmd
          echo "Run docker container log background processes"
          docker logs -f `docker ps -aqf "name=validator-host"` > validator-host.out 2>&1 &
          docker logs -f `docker ps -aqf "name=validator-enclave"` > validator-enclave.out 2>&1 &
          docker logs -f `docker ps -aqf "name=sequencer-host"` > sequencer-host.out 2>&1 &
          docker logs -f `docker ps -aqf "name=sequencer-enclave"` > sequencer-enclave.out 2>&1 &
          docker logs -f `docker ps -aqf "name=eth2network"` > eth2network.out 2>&1 &

      - name: 'Start up the faucet'
        run: |
          cd ${{ github.workspace }}/faucet/
          ./container_run.sh

      - name: 'Build required artifacts for running tests'
        run: |
          cd ${{ github.workspace }}/obscuro-test
          ./get_artifacts.sh
          ls -l ${{ github.workspace }}/obscuro-test/artifacts   

      - name: 'Do a persistence reset'
        run: |
          cd ${{ github.workspace }}/obscuro-test/admin
          /usr/local/bin/pysys.py run -m obscuro.local persistence_reset

      - name: 'Run tests on workflow dispatch'
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          cd ${{ github.workspace }}/obscuro-test/tests
          /usr/local/bin/pysys.py run -m obscuro.local -r ${{ github.event.inputs.arguments }}

      - name: 'Run tests on schedule'
        if: ${{ github.event_name == 'schedule' }}
        run: |
          cd ${{ github.workspace }}/obscuro-test/tests
          /usr/local/bin/pysys.py run -m obscuro.local -r -e skip -e robustness -e performance

      - name: 'Collate pdf output'
        run: |
          cd ${{ github.workspace }}/obscuro-test
          pdftk $(find . -name \*.pdf | sort) cat output results_graphs.pdf

      - name: 'Upload testcase output'
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-artifact
          path: |
            ${{ github.workspace }}/obscuro-test/**/Output
          retention-days: 2

      - name: 'Upload container logs'
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: container-artifact
          path: |
            ${{ github.workspace }}/go-obscuro/*.out
          retention-days: 2

      - name: 'Upload performance output'
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-artifact
          path: |
            ${{ github.workspace }}/obscuro-test/results_graphs.pdf
          if-no-files-found: ignore
          retention-days: 2

      - name: 'Test report'
        uses: dorny/test-reporter@v1
        if: always()
        with:
          working-directory: ${{ github.workspace }}/obscuro-test/
          name: 'test-status'
          path: 'reports/*.xml'
          reporter: java-junit
          fail-on-error: 'false'
          only-summary: 'true'
          
      - name: 'Docker clean containers and images after the test'
        if: always()
        run: |
          for i in `docker ps -a | awk '{ print $1 } ' | grep -v CONTAINER`; do docker stop $i && docker rm $i; done
          docker system prune -af --volumes
          for i in `docker volume ls --filter dangling=true -q`; do docker volume rm $i; done

