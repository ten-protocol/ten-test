# Builds a local testnet and runs a set of tests
#
name: '[locally] Run local tests to locate failure'
run-name: Run local tests  to locate failure
on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch of go-ten to run against'
        required: true
        default: main

jobs:
  test-run:
    runs-on: [self-hosted, Linux, X64, ten-test-gh-runner-01]
    steps:
      - name: 'Check out ten-test'
        uses: actions/checkout@v3
        with:
          path: ./ten-test

      - name: 'Check out go-ten code on workflow dispatch'
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v3
        with:
          repository: ten-protocol/go-ten
          path: ./go-ten
          ref: ${{ github.event.inputs.target_branch }}

      - name: 'Docker clean containers and images before the test'
        run: |
          for i in `docker ps -a | awk '{ print $1 } ' | grep -v CONTAINER`; do docker stop $i && docker rm $i; done
          docker system prune -af --volumes
          for i in `docker volume ls --filter dangling=true -q`; do docker volume rm $i; done

      - name: 'Build docker containers'
        run: |
          cd ${{ github.workspace }}/go-ten/testnet
          ./testnet-local-build_images.sh 

      - name: 'Start up testnet'
        run: |
          cd ${{ github.workspace }}/go-ten/
          go run ./testnet/launcher/cmd
          echo "Run docker container log background processes"
          docker logs -f `docker ps -aqf "name=validator-host"` > validator-host.out 2>&1 &
          docker logs -f `docker ps -aqf "name=validator-enclave"` > validator-enclave.out 2>&1 &
          docker logs -f `docker ps -aqf "name=sequencer-host"` > sequencer-host.out 2>&1 &
          docker logs -f `docker ps -aqf "name=sequencer-enclave"` > sequencer-enclave.out 2>&1 &
          docker logs -f `docker ps -aqf "name=eth2network"` > eth2network.out 2>&1 &
          docker logs -f `docker ps -aqf "name=gateway"` > gateway.out 2>&1 &

      - name: 'Build required artifacts for running tests'
        run: |
          cd ${{ github.workspace }}/ten-test
          ./get_artifacts.sh
          ls -l ${{ github.workspace }}/ten-test/artifacts   

      - name: 'Do a persistence reset'
        run: |
          cd ${{ github.workspace }}/ten-test/admin
          /usr/local/bin/pysys.py run -m ten.local persistence_reset

      - name: 'Run tests on workflow dispatch'
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          cd ${{ github.workspace }}/ten-test/tests
          /usr/local/bin/pysys.py run -m ten.local gen_cor_001 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_002 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_003 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_004 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_005 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_006 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_007 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_008 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_009 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_010 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_040 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_041 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_045 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_050 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_051 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_052 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_054 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_058 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_059 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_060 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_062 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_063 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_070 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_071 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_072 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_073 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_074 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_077 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_078 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_079 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_080 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_081 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_082 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_083 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_084 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_085 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_086 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_087 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_088 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_089 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_090 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_091 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_100 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_101 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_102 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_103 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_104 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_105 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_106 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_107 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_108 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_109 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_110 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_111 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_112 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_113 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_114 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_115 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_120 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_121 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_122 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_130 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_131 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_132 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_135 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_136 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_137 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_138 ten_cor_020
          /usr/local/bin/pysys.py run -m ten.local gen_cor_139 ten_cor_020

      - name: 'Collate pdf output'
        if: always()
        run: |
          cd ${{ github.workspace }}/ten-test
          pdftk $(find . -name \*.pdf | sort) cat output results_graphs.pdf || true

      - name: 'Upload testcase output'
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-artifact
          path: |
            ${{ github.workspace }}/ten-test/**/Output
            !${{ github.workspace }}/ten-test/**/node_modules
          retention-days: 1

      - name: 'Get the gateway logs'
        if: failure()
        run: |
          cd ${{ github.workspace }}/go-ten/
          docker container cp `docker ps -aqf "name=gateway"`:/gateway_logs.log gateway_logs.out

      - name: 'Upload container logs'
        uses: actions/upload-artifact@v4
        if: failure()
        continue-on-error: true
        with:
          name: container-artifact
          path: |
            ${{ github.workspace }}/go-ten/*.out
          retention-days: 1

      - name: 'Upload performance output'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-artifact
          path: |
            ${{ github.workspace }}/ten-test/results_graphs.pdf
          if-no-files-found: ignore
          retention-days: 1
          
      - name: 'Docker clean containers and images after the test'
        if: always()
        run: |
          for i in `docker ps -a | awk '{ print $1 } ' | grep -v CONTAINER`; do docker stop $i && docker rm $i; done
          docker system prune -af --volumes
          for i in `docker volume ls --filter dangling=true -q`; do docker volume rm $i; done

